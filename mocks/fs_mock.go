// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/spf13/afero (interfaces: Fs)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	afero "github.com/spf13/afero"
	os "os"
	time "time"
)

// Mock of Fs interface
type MockFs struct {
	ctrl     *gomock.Controller
	recorder *_MockFsRecorder
}

// Recorder for MockFs (not exported)
type _MockFsRecorder struct {
	mock *MockFs
}

func NewMockFs(ctrl *gomock.Controller) *MockFs {
	mock := &MockFs{ctrl: ctrl}
	mock.recorder = &_MockFsRecorder{mock}
	return mock
}

func (_m *MockFs) EXPECT() *_MockFsRecorder {
	return _m.recorder
}

func (_m *MockFs) Chmod(_param0 string, _param1 os.FileMode) error {
	ret := _m.ctrl.Call(_m, "Chmod", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) Chmod(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Chmod", arg0, arg1)
}

func (_m *MockFs) Chtimes(_param0 string, _param1 time.Time, _param2 time.Time) error {
	ret := _m.ctrl.Call(_m, "Chtimes", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) Chtimes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Chtimes", arg0, arg1, arg2)
}

func (_m *MockFs) Create(_param0 string) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFsRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockFs) Mkdir(_param0 string, _param1 os.FileMode) error {
	ret := _m.ctrl.Call(_m, "Mkdir", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Mkdir", arg0, arg1)
}

func (_m *MockFs) MkdirAll(_param0 string, _param1 os.FileMode) error {
	ret := _m.ctrl.Call(_m, "MkdirAll", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) MkdirAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MkdirAll", arg0, arg1)
}

func (_m *MockFs) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockFsRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockFs) Open(_param0 string) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFsRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0)
}

func (_m *MockFs) OpenFile(_param0 string, _param1 int, _param2 os.FileMode) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "OpenFile", _param0, _param1, _param2)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFsRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OpenFile", arg0, arg1, arg2)
}

func (_m *MockFs) Remove(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Remove", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) Remove(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remove", arg0)
}

func (_m *MockFs) RemoveAll(_param0 string) error {
	ret := _m.ctrl.Call(_m, "RemoveAll", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) RemoveAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveAll", arg0)
}

func (_m *MockFs) Rename(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Rename", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1)
}

func (_m *MockFs) Stat(_param0 string) (os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "Stat", _param0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFsRecorder) Stat(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stat", arg0)
}
