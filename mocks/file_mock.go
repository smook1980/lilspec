// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/spf13/afero (interfaces: File)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
)

// Mock of File interface
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *_MockFileRecorder
}

// Recorder for MockFile (not exported)
type _MockFileRecorder struct {
	mock *MockFile
}

func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &_MockFileRecorder{mock}
	return mock
}

func (_m *MockFile) EXPECT() *_MockFileRecorder {
	return _m.recorder
}

func (_m *MockFile) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockFile) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockFileRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockFile) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockFile) ReadAt(_param0 []byte, _param1 int64) (int, error) {
	ret := _m.ctrl.Call(_m, "ReadAt", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadAt", arg0, arg1)
}

func (_m *MockFile) Readdir(_param0 int) ([]os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "Readdir", _param0)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Readdir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Readdir", arg0)
}

func (_m *MockFile) Readdirnames(_param0 int) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Readdirnames", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Readdirnames(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Readdirnames", arg0)
}

func (_m *MockFile) Seek(_param0 int64, _param1 int) (int64, error) {
	ret := _m.ctrl.Call(_m, "Seek", _param0, _param1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seek", arg0, arg1)
}

func (_m *MockFile) Stat() (os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "Stat")
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Stat() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stat")
}

func (_m *MockFile) Sync() error {
	ret := _m.ctrl.Call(_m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Sync() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sync")
}

func (_m *MockFile) Truncate(_param0 int64) error {
	ret := _m.ctrl.Call(_m, "Truncate", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Truncate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0)
}

func (_m *MockFile) Write(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

func (_m *MockFile) WriteAt(_param0 []byte, _param1 int64) (int, error) {
	ret := _m.ctrl.Call(_m, "WriteAt", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) WriteAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteAt", arg0, arg1)
}

func (_m *MockFile) WriteString(_param0 string) (int, error) {
	ret := _m.ctrl.Call(_m, "WriteString", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) WriteString(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteString", arg0)
}
