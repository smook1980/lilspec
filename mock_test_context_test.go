// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/smook1980/lilspec (interfaces: TestContext)

package lilspec_test

import (
	gomock "github.com/golang/mock/gomock"
	lilspec "github.com/smook1980/lilspec"
)

// Mock of TestContext interface
type MockTestContext struct {
	ctrl     *gomock.Controller
	recorder *_MockTestContextRecorder
}

// Recorder for MockTestContext (not exported)
type _MockTestContextRecorder struct {
	mock *MockTestContext
}

func NewMockTestContext(ctrl *gomock.Controller) *MockTestContext {
	mock := &MockTestContext{ctrl: ctrl}
	mock.recorder = &_MockTestContextRecorder{mock}
	return mock
}

func (_m *MockTestContext) EXPECT() *_MockTestContextRecorder {
	return _m.recorder
}

func (_m *MockTestContext) Errorf(_param0 string, _param1 ...interface{}) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Errorf", _s...)
}

func (_mr *_MockTestContextRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Errorf", _s...)
}

func (_m *MockTestContext) Fatalf(_param0 string, _param1 ...interface{}) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Fatalf", _s...)
}

func (_mr *_MockTestContextRecorder) Fatalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fatalf", _s...)
}

func (_m *MockTestContext) Run(_param0 string, _param1 func(lilspec.TestContext)) bool {
	ret := _m.ctrl.Call(_m, "Run", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTestContextRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", arg0, arg1)
}
